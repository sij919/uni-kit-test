<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="18" height="18" viewBox="0 0 18 18"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <defs>
    <clipPath id="clip-path">
      <rect id="사각형_3346" data-name="사각형 3346" width="16" height="16" fill="none"/>
    </clipPath>
  </defs>
  <g id="Icon_settine_18" data-name="Icon/settine_18" transform="translate(-6025 -5867)">
    <rect id="사각형_3347" data-name="사각형 3347" width="18" height="18" transform="translate(6025 5867)" fill="rgba(255,255,255,0)"/>
    <g id="그룹_8556" data-name="그룹 8556" transform="translate(6026 5868)">
      <g id="그룹_8555" data-name="그룹 8555" transform="translate(0 0)" clip-path="url(#clip-path)">
        <path id="패스_3570" data-name="패스 3570" d="M14.292,8.439c.011-.147.022-.292.019-.443s-.008-.3-.019-.445l1.335-1.02a.993.993,0,0,0,.244-1.267L14.346,2.7a1.008,1.008,0,0,0-1.215-.409l-1.576.616a6.131,6.131,0,0,0-.807-.461L10.5.788A1.01,1.01,0,0,0,9.519,0H6.476A1.023,1.023,0,0,0,5.49.845L5.257,2.462a6.362,6.362,0,0,0-.8.451L2.867,2.3a1,1,0,0,0-1.21.42L.132,5.273A.993.993,0,0,0,.378,6.548L1.706,7.563a3.152,3.152,0,0,0-.021.446c0,.15.009.3.021.445L.372,9.477A.984.984,0,0,0,.137,10.74L1.656,13.3a1.009,1.009,0,0,0,1.213.4l1.577-.615a6.682,6.682,0,0,0,.8.46l.246,1.66A1.012,1.012,0,0,0,6.482,16h3.04a1.027,1.027,0,0,0,.985-.844l.233-1.618a6.3,6.3,0,0,0,.8-.45l1.586.615a.994.994,0,0,0,.349.063,1.016,1.016,0,0,0,.864-.482l1.522-2.557a1,1,0,0,0-.246-1.276Zm-.8,4.332L11.9,12.156l-.482-.187-.432.285a5.2,5.2,0,0,1-.676.379l-.487.229-.077.534L9.521,15l-3.046-.009L6.24,13.4l-.077-.524-.478-.23A5.608,5.608,0,0,1,5,12.261l-.434-.291-.486.19-1.567.632L.979,10.271,2.313,9.248l.431-.329L2.7,8.379c-.009-.121-.017-.245-.017-.37a2.206,2.206,0,0,1,.01-.3l.084-.579-.466-.356L.991,5.786,2.506,3.23l1.586.616.482.187.433-.286a5.322,5.322,0,0,1,.676-.38l.488-.23L6.247,2.6,6.476,1H9.519l0,0L9.76,2.6l.077.527.482.229A5.328,5.328,0,0,1,11,3.738l.434.293.488-.191,1.568-.627,1.533,2.523-1.334,1.02-.43.329.04.539c.009.13.015.258.018.389s-.009.228-.018.352l-.041.541.431.328L15,10.215Z" transform="translate(0 0)" fill="#7b7b7b"/>
        <path id="패스_3571" data-name="패스 3571" d="M8,5a3,3,0,1,0,3,3A3,3,0,0,0,8,5m0,5a2,2,0,1,1,2-2,2,2,0,0,1-2,2" transform="translate(-0.002 0)" fill="#7b7b7b"/>
      </g>
    </g>
  </g>
</svg>